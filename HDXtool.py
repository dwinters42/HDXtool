#!/usr/bin/env python
# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Fri Jun 25 12:10:54 2010

# Copyright (c) 2010 Daniel Gruber <daniel@tydirium.org>
#
# Permission to use, copy, modify, and distribute this software for
# any purpose with or without fee is hereby granted, provided that the
# above copyright notice and this permission notice appear in all
# copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
# WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
# AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL
# DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA
# OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
# TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.

import wx

# begin wxGlade: extracode
# end wxGlade

import matplotlib
matplotlib.use('WxAgg')

import os, yaml
from pylab import *

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        
        self.ids={'roi':wx.ID_HIGHEST+1,'suggest':wx.ID_HIGHEST+2,\
                      'manual':wx.ID_HIGHEST+3,'accept':wx.ID_HIGHEST+4}

        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, -1)
        
        # Menu Bar
        self.frame_1_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_OPEN, "Load", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_SAVE, "Save", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.Append(wx.ID_EXIT, "Quit", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(self.ids['roi'], "set ROI", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "Fragment")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "Info", "", wx.ITEM_NORMAL)
        self.frame_1_menubar.Append(wxglade_tmp_menu, "About")
        self.SetMenuBar(self.frame_1_menubar)
        # Menu Bar end
        self.frame_1_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.frame_1_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_TEXT)
        self.SetToolBar(self.frame_1_toolbar)
        self.frame_1_toolbar.AddLabelTool(wx.ID_OPEN, "Load", (wx.ArtProvider.GetBitmap(wx.ART_FILE_OPEN, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(wx.ID_SAVE, "Save", (wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(self.ids['roi'], "ROI", (wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(self.ids['suggest'], "Suggest", (wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(self.ids['manual'], "Manual", (wx.ArtProvider.GetBitmap(wx.ART_GO_FORWARD, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_1_toolbar.AddLabelTool(self.ids['accept'], "Accept", (wx.ArtProvider.GetBitmap(wx.ART_TICK_MARK, wx.ART_TOOLBAR)), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.listctrlData = wx.ListCtrl(self.panel_1, -1, style=wx.LC_REPORT|wx.LC_AUTOARRANGE|wx.LC_SINGLE_SEL|wx.LC_HRULES|wx.LC_VRULES|wx.SUNKEN_BORDER)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.loadData, id=wx.ID_OPEN)
        self.Bind(wx.EVT_MENU, self.saveData, id=wx.ID_SAVE)
        self.Bind(wx.EVT_MENU, self.onExit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_MENU, self.setROI, id=self.ids['roi'])
        self.Bind(wx.EVT_MENU, self.printInfo, id=wx.ID_ABOUT)
        self.Bind(wx.EVT_TOOL, self.loadData, id=wx.ID_OPEN)
        self.Bind(wx.EVT_TOOL, self.saveData, id=wx.ID_SAVE)
        self.Bind(wx.EVT_TOOL, self.setROI, id=self.ids['roi'])
        self.Bind(wx.EVT_TOOL, self.suggestPeaks, id=self.ids['suggest'])
        self.Bind(wx.EVT_TOOL, self.manualPeaks, id=self.ids['manual'])
        self.Bind(wx.EVT_TOOL, self.acceptPeaks, id=self.ids['accept'])
        # end wxGlade

        self.dfile=''
        self.paramfile=''
        self.xdata=None
        self.ydata=None

        # ROI stuff
        self.low=None
        self.high=None
        self.thres=None
        self.hl1=None
        self.hl2=None
        self.hl3=None

        self.peakvalx=None
        self.peakvaly=None
        self.peaks_sel=None
        self.centroid_line=None

        self.data=[]
        self.data_changed=False

        self._updateListCtrl()

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("HDXtool")
        self.frame_1_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_1_statusbar_fields = ["Ready"]
        for i in range(len(frame_1_statusbar_fields)):
            self.frame_1_statusbar.SetStatusText(frame_1_statusbar_fields[i], i)
        self.frame_1_toolbar.Realize()
        self.listctrlData.SetMinSize((402, 426))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2.Add(self.listctrlData, 1, wx.ALL|wx.EXPAND, 5)
        self.panel_1.SetSizer(sizer_2)
        sizer_1.Add(self.panel_1, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def loadData(self, event): # wxGlade: MainFrame.<event_handler>
        dlg=wx.FileDialog(self)
        if dlg.ShowModal() == wx.ID_OK:
            # load data file, plot data
            self.dfile=dlg.GetPath()
            d=loadtxt(self.dfile)
            self.xdata=d[:,0]
            self.ydata=d[:,1]
            figure(1)
            clf();
            plot(self.xdata,self.ydata)

            # load the file with the parameters
            self.data=[]

            self.paramfile=os.path.splitext(self.dfile)[0]+"_params.yaml"

            if os.access(self.paramfile, os.R_OK | os.W_OK):
                df=file(self.paramfile,'r')
                try:
                    self.data=yaml.load(df)
                except:
                    wx.MessageBox(\
                        "Cannot read peak data file!","Warning", wx.OK)
                df.close()

                for item in self.data:
                    axvspan(item['low'],item['high'],alpha=0.1,color='k')

            self._updateListCtrl()
            show()
            draw()
            self.data_changed=False
   
    def setROI(self, event): # wxGlade: MainFrame.<event_handler>
        if self.dfile == '':
            dlg=wx.MessageBox('No data loaded!','Error', wx.ID_OK)
            return

        try:
            self.hl1.remove()
            self.hl2.remove()
            self.hl3.remove()
        except:
            pass

        draw()

        # clear variables
        self.high=None
        self.low=None
        self.thres=None

        # pick threshold and left and right limit
        pos=ginput(1,timeout=0)
        self.thres=pos[0][1]
        self.hl1=axhline(y=self.thres,color='r')
        draw()

        pos=ginput(1,timeout=0)
        self.low=pos[0][0]
        self.hl2=axvline(x=self.low,color='g')
        draw()

        pos=ginput(1,timeout=0)
        self.high=pos[0][0]
        self.hl3=axvline(x=self.high,color='g')
        draw()

        # copy only the data in the region of interest
        self.x=take(self.xdata,find((self.xdata>self.low)&(self.xdata<self.high)))
        self.y=take(self.ydata,find((self.xdata>self.low)&(self.xdata<self.high)))

        # threshold
        self.yth=zeros(len(self.y))
        for ii in range(0,len(self.y)):
            if self.y[ii]<self.thres:
                self.yth[ii]=0
            else:
                self.yth[ii]=self.y[ii]

    def suggestPeaks(self, event): # wxGlade: MainFrame.<event_handler>
        if self.low is None or self.high is None or self.thres is None:
            dlg=wx.MessageBox('No ROI selected!','Error', wx.ID_OK)
            return

        try:
            self.peaks_sel[0].remove()
            self.centroid_line.remove()
        except:
            pass

        # let the user select two peaks
        (x1,y1)=self._pickpeak(self.x,self.yth)
        (x2,y2)=self._pickpeak(self.x,self.yth)
        meandist=(max(x1,x2)-min(x1,x2))
        delta=meandist*0.01

        ### suggest peaks ###
        # start from startpeak, go to the right until self.high and mark
        # peaks, then do the same to the left
        self.peakvalx=[float(x1)]
        self.peakvaly=[float(y1)]
        means=[meandist]
        p=x1+meandist
        pold=x1

        while p<self.high:
            (localmaxpos,localmax)=self._localpeak((p,0),self.x,self.yth,delta)
            if localmax>0:
                self.peakvalx.append(float(localmaxpos))
                self.peakvaly.append(float(localmax))
                means.append(abs(localmaxpos-pold))
            pold=p
            p=p+(sum(means)/len(means))

        p=x1-meandist
        pold=x1
        while p>self.low:
            (localmaxpos,localmax)=self._localpeak((p,0),self.x,self.yth,delta)
            if localmax>0:
                self.peakvalx.append(float(localmaxpos))
                self.peakvaly.append(float(localmax))
                means.append(abs(localmaxpos-pold))
            pold=p
            p=p-(sum(means)/len(means))

        tmp=axis()
        self.peaks_sel=plot(self.peakvalx,self.peakvaly,'go')
        axis(tmp)

        # if wx.MessageBox("Take suggested peaks?","Question", \
        #             wx.YES_NO) == wx.NO:
        #     # the user wants to select them manually
        #     p=ginput(0)
        #     # XXX

        # calculate centroid
        c=0
        for ii in range(0,len(self.yth)):
            c=c+self.x[ii]*self.yth[ii]

        self.centroid=c/self.yth.sum()
        self.centroid_line=axvline(x=self.centroid,color='c')
        draw()


    def manualPeaks(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `manualPeaks' not implemented"
        event.Skip()

    def acceptPeaks(self, event): # wxGlade: MainFrame.<event_handler>
        if self.low is None or self.high is None or self.thres is None:
            dlg=wx.MessageBox('No ROI selected!','Error', wx.ID_OK)
            return

        if self.peakvalx is None or self.peakvaly is None:
            dlg=wx.MessageBox('No peaks selected!','Error', wx.ID_OK)
            return

        self.data.append({'low':float(self.low),\
                              'high':float(self.high),\
                              'thres':float(self.thres),\
                              'centroid':float(self.centroid),\
                              'charge':0.0,\
                              'peaks':[self.peakvalx,self.peakvaly]})

        tmp=axis()
        axvspan(self.low,self.high,alpha=0.1,color='k')
        axis(tmp)
        
        self.data_changed=True
        self._updateListCtrl()

        self.centroid_line.remove()
        self.peaks_sel[0].set_color('m')
        draw()

        
    def saveData(self, event): # wxGlade: MainFrame.<event_handler>
        if self.data_changed == True:
            if os.access(self.paramfile,os.R_OK | os.W_OK):
                if wx.MessageBox(\
                    "Data files exist, overwrite?","Overwrite", \
                        wx.YES_NO) == wx.NO:
                    return
        
            df=file(self.paramfile,'w')
            yaml.dump(self.data,df)
            df.close()

            self.data_changed=False
        
    def onExit(self, event): # wxGlade: MainFrame.<event_handler>
        if self.data_changed:
            self.saveData(1)

        close()
        self.Destroy()

    def printInfo(self, event): # wxGlade: MainFrame.<event_handler>
        info=wx.AboutDialogInfo()
        info.SetName("HDXtool")
        info.SetDescription("HDX for Clint")
        info.SetCopyright("(c) 2010 Daniel Gruber")
        info.AddDeveloper("Daniel Gruber <daniel@tydirium.org>")
        wx.AboutBox(info)

    def _pickpeak(self,x,y):
        ii=axis()
        # XXX this is a bit dodgy
        delta=(ii[1]-ii[0])/200.0
        pos=ginput(1,timeout=0)
        pos=pos[0]
        (localmaxpos,localmax)=self._localpeak(pos,x,y,delta)

        return (localmaxpos,localmax)

    def _localpeak(self,pos,x,y,delta):
        localx=take(x,find((x>(pos[0]-delta))&(x<(pos[0]+delta))))
        localy=take(y,find((x>(pos[0]-delta))&(x<(pos[0]+delta))))
    
        localmax=localy.max()
        localmaxpos=take(localx,find(localy==localy.max()))[0]
        
        return (localmaxpos,localmax)

    def _updateListCtrl(self):
        self.listctrlData.DeleteAllItems()

        self.listctrlData.InsertColumn(0,'Low')
        self.listctrlData.InsertColumn(1,'High')
        self.listctrlData.InsertColumn(2,'Thres')
        self.listctrlData.InsertColumn(3,'Centr')
        self.listctrlData.InsertColumn(4,'Charge')

        if len(self.data)>0:
            for item in self.data:
                ind=self.listctrlData.InsertStringItem(0,'%.1f' % item['low'])
                self.listctrlData.SetStringItem(ind,1,'%.1f' % item['high'])
                self.listctrlData.SetStringItem(ind,2,'%.1e' % item['thres'])
                self.listctrlData.SetStringItem(ind,3,'%.1f' % item['centroid'])
                self.listctrlData.SetStringItem(ind,4,'%.1f' % item['charge'])


# end of class MainFrame

class MyApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame_1 = MainFrame(None, -1, "")
        self.SetTopWindow(frame_1)
        frame_1.Show()
        return 1

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
